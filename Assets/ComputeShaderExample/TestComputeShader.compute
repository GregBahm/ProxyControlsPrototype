#pragma kernel UpdateParticles

struct WindData
{
	float3 sourceVelocity;
	float3 currentPosition;
	float time;
};

float particleLifetime;
float particleSpeed;
float deltaTime;

Texture3D MapTexture;

SamplerState samplerMapTexture;

RWStructuredBuffer<WindData> particles;
RWStructuredBuffer<float4> particlePositions; //xyz = position, w = speed


[numthreads(128,1,1)]
void UpdateParticles(uint3 id : SV_DispatchThreadID)
{
	float time = particles[id.x].time + deltaTime;

	float positionReset = floor(time / particleLifetime); // 0 if time < lifetime, 1 if time > lifetime

	particles[id.x].time = time % particleLifetime;

	float3 uvs = lerp(particles[id.x].currentPosition, float3(.5, .5, .5), positionReset);

	float3 mapSample = MapTexture.SampleLevel(samplerMapTexture, uvs * .5, 0);
	mapSample = mapSample * 2 - 1;
	//mapSample = float3(0, mapSample.x, mapSample.y); 

	float3 currents = mapSample * deltaTime * particleSpeed;
	float3 diffusion = particles[id.x].sourceVelocity * deltaTime * particleSpeed;
	float progression = time / particleLifetime;
	float3 offset = lerp(diffusion, currents, progression);
	float3 newPos = (uvs + offset);

	particles[id.x].currentPosition = newPos;
	
	//float oldVelocity = particlePositions[id.x].w;
	//float newVelocity = length(mapSample);
	//newVelocity = lerp(oldVelocity, newVelocity, .1);
	float w = time / particleLifetime;
	particlePositions[id.x] = float4(particles[id.x].currentPosition, w);
}