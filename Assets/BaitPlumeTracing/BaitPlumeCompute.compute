#pragma kernel CalculateBasePositions
#pragma kernel CalculatePlumesStrands

#define POINTS_PER_STRAND 16

float _StrandIntensity;
float _BaseIntensity;
float _DispersionBaseIntensity;
float _DispersionDecay;
float _FeedDropGravity;
float _Time;
float _DispersionsCount;
float _StrandsPerBasePoint;

Texture3D MapTexture;
SamplerState samplerMapTexture;

StructuredBuffer<float3> _Dispersions;
RWStructuredBuffer<float3> _BasePositions;
RWStructuredBuffer<float3> _PlumeStrands;

float3 ApplyCurrents(float3 currentPos, float intensity, float3 dispersion)
{
  float3 uvs = currentPos * .1;

  //uvs += float3(_Time * .1, _Time * .05, _Time * .02);

  float2 mapSample = MapTexture.SampleLevel(samplerMapTexture, uvs, 0).xy;
  mapSample = mapSample * 2 - 1;
  mapSample *= intensity;
  float3 positionChange = float3(mapSample.x, 0, mapSample.y);
  positionChange += dispersion;
  return currentPos + positionChange;
}

float3 GetBasePosition(uint id)
{

  float basePositionIndex = (float)id / (_StrandsPerBasePoint - 2); 
  //return _BasePositions[basePositionIndex];
  float baseCeil = ceil(basePositionIndex);
  float baseFloor = floor(basePositionIndex);
  float3 ceilPos = _BasePositions[baseCeil];
  float3 floorPos = _BasePositions[baseFloor];
  float param = basePositionIndex % 1;
  return lerp(floorPos, ceilPos, param);
}

[numthreads(128, 1, 1)]
void CalculatePlumesStrands(uint3 id : SV_DispatchThreadID)
{
  float3 pos = GetBasePosition(id.x);
  float3 dispersion = _Dispersions[id.x % _DispersionsCount];
  dispersion *= _DispersionBaseIntensity;
  for (uint i = 0; i < POINTS_PER_STRAND; i++)
  {
    float strandParam = (float)i / POINTS_PER_STRAND;
    _PlumeStrands[id.x * POINTS_PER_STRAND + i] = pos;
    pos = ApplyCurrents(pos, _StrandIntensity, dispersion * strandParam);
  }
}

[numthreads(128, 1, 1)]
void CalculateBasePositions(uint3 id : SV_DispatchThreadID)
{
    float3 lastPos = _BasePositions[id.x];
    float3 newPos = ApplyCurrents(lastPos, _BaseIntensity, float3(0, -_FeedDropGravity, 0));
    _BasePositions[id.x + 1] = newPos;
}