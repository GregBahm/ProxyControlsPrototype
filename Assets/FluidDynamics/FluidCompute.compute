#pragma kernel Advect
#pragma kernel AddDyeSpray
#pragma kernel ClearTextures
#pragma kernel ComputeDivergence
#pragma kernel Jacobi
#pragma kernel SubtractGradient
#pragma kernel SetTerrainVelocity
#pragma kernel SetTerrainPressure

float _DyeDissipation;
float _VelocityDissipation;
float _Timestep;

RWTexture3D<float4> _Velocity;
RWTexture3D<float4> _Dye;
RWTexture3D<float4> _Divergence;
RWTexture3D<float4> _Pressure;

Texture3D<float4> ReadDye;
SamplerState samplerReadDye;

Texture3D<float4> ReadVelocity;
SamplerState samplerReadVelocity;

Texture3D<float4> ReadDivergence;
SamplerState samplerReadDivergence;

Texture3D<float4> ReadPressure;
SamplerState samplerReadPressure;

RWTexture3D<float4> _ClearTexture;

Texture2D<float4> Heightmap;
SamplerState samplerHeightmap;

float3 _Resolution;

float4 _DyeColor;
float3 _DyeSprayPosition;
float3 _DyeSprayDirection;
float _DyeSprayRadius;

float Gaussian(float3 pos, float radius)
{
    return exp(-dot(pos, pos) / (radius * radius));
}

float GetTerrainHeight(float3 idToUv)
{
  float2 uvs = 1 - idToUv.xz;
  return Heightmap.SampleLevel(samplerHeightmap, uvs, 0);
}

[numthreads(16,16,1)]
void AddDyeSpray(uint3 id : SV_DispatchThreadID)
{
    float3 resolutionSample = _Resolution - float3(1, 1, 1);
    float3 idSample = float3(id) + float3(0.5, 0.5, 0.5);
    float3 centerToCurrent = idSample - _DyeSprayPosition * _Resolution;

    float gaussianValue = Gaussian(centerToCurrent, _DyeSprayRadius);
    float4 outputColor = _DyeColor * gaussianValue;
    float4 readColor = ReadDye.SampleLevel(samplerReadDye, idSample / _Resolution, 0);

    outputColor = outputColor + readColor;

    float3 outputVelocity = _DyeSprayDirection;// *gaussianValue;
    float4 readVelocity = ReadVelocity.SampleLevel(samplerReadVelocity, idSample / _Resolution, 0);

    outputVelocity = outputVelocity + readVelocity.rgb;

    float3 idToUv = idSample / _Resolution;
    float terrainHeight = GetTerrainHeight(idToUv);
    bool isOverTerrain = terrainHeight < idToUv.y;
    if (isOverTerrain)
    {
      //float velocityLength = length(outputVelocity.xzy);
      //if (velocityLength < .001)
      //{
      //  outputVelocity = float4(0.005, 0, 0, 1) ;
      //}
      _Dye[id] = outputColor;
      _Velocity[id] = float4(outputVelocity.rgb, 1);
    }
    else
    {
      _Dye[id] = 1;
      _Velocity[id] = 0;
    }
 
    //_Velocity[id] = float4(outputVelocity.rgb, 1);
}

[numthreads(16,16,1)]
void Advect(uint3 id : SV_DispatchThreadID)
{
    float3 idSample = float3(id) + float3(0.5, 0.5, 0.5);
    float4 velocityAtId = ReadVelocity.SampleLevel(samplerReadVelocity, idSample / _Resolution, 0);

    float3 backtrackSamplePoint = idSample / _Resolution - _Timestep * velocityAtId.xyz;

    float4 backtrackVelocity = ReadVelocity.SampleLevel(samplerReadVelocity, backtrackSamplePoint, 0);
    float4 backtrackDye = ReadDye.SampleLevel(samplerReadDye, backtrackSamplePoint, 0);

    _Dye[id] = backtrackDye * _DyeDissipation;
    _Velocity[id] = float4(_VelocityDissipation * backtrackVelocity.xyz, 1);
}

[numthreads(16, 16, 1)]
void ComputeDivergence(uint3 id : SV_DispatchThreadID)
{
    float3 idSample = float3(id) + float3(0.5, 0.5, 0.5);

    // Compute neighbors
    float4 velXPos = ReadVelocity.SampleLevel(samplerReadVelocity, (idSample + float3( 1, 0, 0)) / _Resolution, 0);
    float4 velXNeg = ReadVelocity.SampleLevel(samplerReadVelocity, (idSample + float3(-1, 0, 0)) / _Resolution, 0);
    float4 velYPos = ReadVelocity.SampleLevel(samplerReadVelocity, (idSample + float3(0,  1, 0)) / _Resolution, 0);
    float4 velYNeg = ReadVelocity.SampleLevel(samplerReadVelocity, (idSample + float3(0, -1, 0)) / _Resolution, 0);
    float4 velZPos = ReadVelocity.SampleLevel(samplerReadVelocity, (idSample + float3(0, 0,  1)) / _Resolution, 0);
    float4 velZNeg = ReadVelocity.SampleLevel(samplerReadVelocity, (idSample + float3(0, 0, -1)) / _Resolution, 0);

    // TODO: multiply 1/dx
    float3 rdx = 2 / _Resolution;
    //rdx = rdx * 10;
    //float3 rdx = 0.5 / resolution.xyz;
    _Divergence[id] = float4((velXPos.x - velXNeg.x) + (velYPos.y - velYNeg.y) + (velZPos.z - velZNeg.z), 0, 0, 1);
}

[numthreads(16, 16, 1)]
void Jacobi(uint3 id : SV_DispatchThreadID)
{
    float3 idSample = float3(id) + float3(0.5, 0.5, 0.5);

    // Compute neighbors
    float pressureXPos = ReadPressure.SampleLevel(samplerReadPressure, (idSample + float3(1, 0, 0)) / _Resolution, 0).x;
    float pressureXNeg = ReadPressure.SampleLevel(samplerReadPressure, (idSample + float3(-1, 0, 0)) / _Resolution, 0).x;
    float pressureYPos = ReadPressure.SampleLevel(samplerReadPressure, (idSample + float3(0, 1, 0)) / _Resolution, 0).x;
    float pressureYNeg = ReadPressure.SampleLevel(samplerReadPressure, (idSample + float3(0, -1, 0)) / _Resolution, 0).x;
    float pressureZPos = ReadPressure.SampleLevel(samplerReadPressure, (idSample + float3(0, 0, 1)) / _Resolution, 0).x;
    float pressureZNeg = ReadPressure.SampleLevel(samplerReadPressure, (idSample + float3(0, 0, -1)) / _Resolution, 0).x;

    float divergence = ReadDivergence.SampleLevel(samplerReadDivergence, idSample / _Resolution, 0).x;
    float3 uvRes = 2 / _Resolution;

    float denom = 2 * dot(uvRes, uvRes);
    float xMult = uvRes.y * uvRes.y + uvRes.z * uvRes.z;
    float yMult = uvRes.x * uvRes.x + uvRes.z * uvRes.z;
    float zMult = uvRes.x * uvRes.x + uvRes.y * uvRes.y;
    float divMult = uvRes.x * uvRes.x * uvRes.y * uvRes.y * uvRes.z * uvRes.z;

    _Pressure[id] = float4((pressureXPos + pressureXNeg + pressureYPos + pressureYNeg + pressureZPos + pressureZNeg - divergence) / 6, 0, 0, 1);
}

[numthreads(16, 16, 1)]
void SubtractGradient(uint3 id : SV_DispatchThreadID)
{
    float3 idSample = float3(id) + float3(0.5, 0.5, 0.5);
    float4 velocityAtId = ReadVelocity.SampleLevel(samplerReadVelocity, idSample / _Resolution, 0);

    // Compute neighbors
    float pressureXPos = ReadPressure.SampleLevel(samplerReadPressure, (idSample + float3( 1, 0, 0)) / _Resolution, 0).x * 0.5;
    float pressureXNeg = ReadPressure.SampleLevel(samplerReadPressure, (idSample + float3(-1, 0, 0)) / _Resolution, 0).x * 0.5;
    float pressureYPos = ReadPressure.SampleLevel(samplerReadPressure, (idSample + float3(0,  1, 0)) / _Resolution, 0).x * 0.5;
    float pressureYNeg = ReadPressure.SampleLevel(samplerReadPressure, (idSample + float3(0, -1, 0)) / _Resolution, 0).x * 0.5;
    float pressureZPos = ReadPressure.SampleLevel(samplerReadPressure, (idSample + float3(0, 0,  1)) / _Resolution, 0).x * 0.5;
    float pressureZNeg = ReadPressure.SampleLevel(samplerReadPressure, (idSample + float3(0, 0, -1)) / _Resolution, 0).x * 0.5;

    float4 pressureGradient = float4(pressureXPos - pressureXNeg, pressureYPos - pressureYNeg, pressureZPos - pressureZNeg, 1);
    
    _Velocity[id] = float4(velocityAtId.xyz - pressureGradient.xyz , 1);
}

[numthreads(16, 16, 1)]
void ClearTextures(uint3 id : SV_DispatchThreadID)
{
  _ClearTexture[id] = 0;
}

[numthreads(16, 16, 1)]
void SetTerrainPressure(uint3 id : SV_DispatchThreadID)
{
  float3 idSample = float3(id)+float3(0.5, 0.5, 0.5);
  float4 oldVal = ReadPressure.SampleLevel(samplerReadPressure, idSample / _Resolution, 0);


  float3 idToUv = idSample / _Resolution;
  float terrainHeight = GetTerrainHeight(idToUv);
  terrainHeight += 0.01f; // For some reason the simulation can freak out if terrainHeight = 0
  bool isOverTerrain = terrainHeight > idToUv.y;

  if (isOverTerrain)
  {
    _Pressure[id] = oldVal;
  }
  else
  {
    _Pressure[id] = oldVal;
  }
}
[numthreads(16, 16, 1)]
void SetTerrainVelocity(uint3 id : SV_DispatchThreadID)
{
  float3 idSample = float3(id) + float3(0.5, 0.5, 0.5);
  float4 oldVal = ReadVelocity.SampleLevel(samplerReadVelocity, idSample / _Resolution, 0);


  float3 idToUv = idSample / _Resolution;
  float terrainHeight = GetTerrainHeight(idToUv);
  terrainHeight += 0.01f; // For some reason the simulation can freak out if terrainHeight = 0
  bool isOverTerrain = terrainHeight > idToUv.y;

  if(isOverTerrain)
  {
    _Velocity[id] = oldVal;
    //_Velocity[id] = 0;
  }
  else
  {
    //oldVal.x = .05f;
    //float distToTerrain = idToUv.y - terrainHeight;
    //float terrainPow = 1 - distToTerrain;
    //terrainPow = pow(terrainPow, .1);
    //oldVal.y += terrainPow * .01;
    _Velocity[id] = oldVal; 
  }
}